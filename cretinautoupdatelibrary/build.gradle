apply plugin: 'com.android.library'
apply plugin: 'maven-publish' // JitPack 需要这个插件

android {
    namespace 'com.cretin.www.cretinautoupdatelibrary'
    compileSdkVersion 35

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 35
        versionCode 29
        versionName "2.0.9"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // 忽略错误信息
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0'
    api 'com.liulishuo.filedownloader:library:1.7.6'
    
    // 测试依赖
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

repositories {
    mavenCentral()
}

// AAR构建配置
android.libraryVariants.all { variant ->
    variant.outputs.all { output ->
        def outputFile = output.outputFile
        if (outputFile != null && outputFile.name.endsWith('.aar')) {
            def fileName = "cretinautoupdatelibrary-${android.defaultConfig.versionName}-${variant.buildType.name}.aar"
            output.outputFileName = fileName
        }
    }
}

// 创建便捷的AAR构建任务
task buildReleaseAar(type: Exec, dependsOn: 'assembleRelease') {
    group = 'build'
    description = 'Build release AAR and copy to outputs directory'
    
    doFirst {
        // 创建输出目录
        def outputDir = file("${project.rootDir}/aar_outputs")
        if (!outputDir.exists()) {
            outputDir.mkdirs()
        }
    }
    
    doLast {
        // 复制AAR文件到项目根目录
        def sourceAar = file("${project.buildDir}/outputs/aar/cretinautoupdatelibrary-${android.defaultConfig.versionName}-release.aar")
        def targetDir = file("${project.rootDir}/aar_outputs")
        def targetAar = file("${targetDir}/cretinautoupdatelibrary-${android.defaultConfig.versionName}-release.aar")
        
        if (sourceAar.exists()) {
            copy {
                from sourceAar
                into targetDir
            }
            println "AAR file copied to: ${targetAar.absolutePath}"
        } else {
            println "Warning: AAR file not found at ${sourceAar.absolutePath}"
        }
    }
    
    commandLine 'echo', 'AAR build completed'
}

// 创建包含源码的AAR任务
task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = 'sources'
}

// 创建文档JAR任务
task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
}

task javadocJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier = 'javadoc'
    from androidJavadocs.destinationDir
}

// JitPack 发布配置 - 使用现代组件发布以包含依赖信息
publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.github.MZCretin'
            artifactId = 'cretinautoupdatelibrary'
            version = '2.0.9'
            
            // 使用组件发布，这会自动包含依赖信息
//            afterEvaluate {
//                from components.release
//            }
            
            pom {
                name = 'CretinAutoUpdateLibrary'
                description = 'Android Auto Update Library'
                url = 'https://github.com/MZCretin/AutoUpdateProject'
                
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                
                developers {
                    developer {
                        id = 'cretin'
                        name = 'Cretin'
                        email = 'mxnzp_life@163.com'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/MZCretin/AutoUpdateProject.git'
                    developerConnection = 'scm:git:ssh://github.com/MZCretin/AutoUpdateProject.git'
                    url = 'https://github.com/MZCretin/AutoUpdateProject'
                }
            }
        }
    }
}
